import org.apache.tools.ant.filters.*

plugins {
    id 'java'
    id 'idea'
}

group = 'mod.wurmunlimited.npcs.crafter'
version = '0.5.4'

sourceCompatibility = 1.8
def $shortName = 'crafter'

repositories {
    mavenCentral()
}

configurations {
    provided

    sourceSets.main.compileClasspath += configurations.provided
    sourceSets.main.runtimeClasspath += configurations.provided
    sourceSets.test.compileClasspath += configurations.provided
    sourceSets.test.runtimeClasspath += configurations.provided
}

dependencies {
    testImplementation project(':WurmTestingHelper')
    implementation fileTree(dir: 'E:/Steam/steamapps/common/Wurm Unlimited/WurmServerLauncher/', includes: ["server.jar", "modlauncher.jar", "javassist.jar"])
//    implementation fileTree(dir: 'E:/Steam/steamapps/common/Wurm Unlimited/WurmServerLauncher/lib/', includes: ["annotations-16.0.2.jar",
//            "annotations-2.0.1.jar", "ServerLauncher-0.43.jar", "WurmUnlimitedCommon-1.9.2.7.jar", "guava-18.0.jar", "javassist-3.23.1.jar",
//            "sqlite-jdbc-3.8.11.2.jar"])
    implementation project(':BMLBuilder')
    implementation project(':CreatureCustomiser')
    implementation project(':PlaceNpc')
}

jar {
    doLast {
        copy {
            from jar
            into 'E:/Steam/steamapps/common/Wurm Unlimited/WurmServerLauncher/mods/crafter/'
        }
        copy {
            from $shortName + '.properties'
            into 'E:/Steam/steamapps/common/Wurm Unlimited/WurmServerLauncher/mods/'
            expand(output: 'print')
            filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('crlf'))
        }
    }

    from {
        project(':PlaceNpc').sourceSets.main.output
    }
    from {
        project(':BMLBuilder').sourceSets.main.output
    }
    from {
        project(':CreatureCustomiser').sourceSets.main.output
    }
    exclude 'Trade.class'
    exclude 'TradeHandler.class'
    exclude 'TradingWindow.class'
    includeEmptyDirs false
    archiveName $shortName + '.jar'

    manifest {
        attributes('Implementation-Version': archiveVersion)
    }
}.dependsOn(test)

test {
    useJUnitPlatform()

    doLast {
        delete fileTree('.') {
            include 'worker*.log'
        }
    }
}

task zip(type: Zip) {
    into($shortName) {
        from jar
    }
    from($shortName + '.properties') {
        expand(output: 'save')
        filter(FixCrLfFilter, eol: FixCrLfFilter.CrLf.newInstance('crlf'))
    }

    archiveName = $shortName + '.zip'
}